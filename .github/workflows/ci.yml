name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle/**'

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'src/**'
              - 'build.gradle'
              - 'settings.gradle'
              - 'gradle/**'

  build:
    needs: detect
    if: needs.detect.outputs.code_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Gradle via SDKMAN
        shell: bash
        run: |
          curl -s https://get.sdkman.io | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.14.3 || sdk install gradle 8.14.2 || sdk install gradle 8.14.1 || sdk install gradle 8.7
          gradle --version

      - name: Lint (Spotless)
        run: gradle --no-daemon -q lint

      - name: Test
        run: gradle --no-daemon -q test

      - name: Coverage (JaCoCo) and Check
        run: |
          gradle --no-daemon -q jacocoTestReport
          # check includes jacocoTestCoverageVerification (95% thresholds)
          gradle --no-daemon -q check

      - id: coverage-summary
        name: Coverage Summary (Job Summary)
        if: always()
        shell: bash
        run: |
          python3 - <<'PY'
import os
import xml.etree.ElementTree as ET
from decimal import Decimal, ROUND_HALF_UP

xml_path = 'build/reports/jacoco/test/jacocoTestReport.xml'
gss = os.environ.get('GITHUB_STEP_SUMMARY')
go = os.environ.get('GITHUB_OUTPUT')

def write_summary(msg: str):
    if gss:
        with open(gss, 'a', encoding='utf-8') as f:
            f.write(msg)

def write_output(lines_pct: str, branches_pct: str):
    if go:
        with open(go, 'a', encoding='utf-8') as f:
            f.write(f"LINES={lines_pct}\nBRANCHES={branches_pct}\n")

if not os.path.exists(xml_path):
    write_summary(f"JaCoCo XML not found at {xml_path}\n")
    raise SystemExit(0)

root = ET.parse(xml_path).getroot()

def sum_counters(tp: str):
    missed = covered = 0
    # Prefer summing per-class counters to avoid duplicates
    for cls in root.findall('.//class'):
        for cnt in cls.findall('counter'):
            if cnt.get('type') == tp:
                missed += int(cnt.get('missed', '0'))
                covered += int(cnt.get('covered', '0'))
    # Fallback to any counters if class-level not present
    if missed == 0 and covered == 0:
        for cnt in root.findall(f".//counter[@type='{tp}']"):
            missed += int(cnt.get('missed', '0'))
            covered += int(cnt.get('covered', '0'))
    return missed, covered

lm, lc = sum_counters('LINE')
bm, bc = sum_counters('BRANCH')

def pct(cov: int, mis: int) -> str:
    total = cov + mis
    if total == 0:
        return '0.0'
    return str((Decimal(cov) / Decimal(total) * 100).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP))

line_pct = pct(lc, lm)
branch_pct = pct(bc, bm)

summary = (
    "### Test Coverage Summary\n"
    f"- Lines: {line_pct}% ({lc}/{lc+lm} covered)\n"
    f"- Branches: {branch_pct}% ({bc}/{bc+bm} covered)\n"
)
write_summary(summary)
write_output(line_pct, branch_pct)
print(summary)
PY

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-summary
          message: |
            ### Test Coverage Summary
            Lines: ${{ steps.coverage-summary.outputs.LINES }}%
            Branches: ${{ steps.coverage-summary.outputs.BRANCHES }}%

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test
